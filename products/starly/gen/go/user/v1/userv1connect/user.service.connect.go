// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/v1/user.service.proto

package userv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/techmely/models/user/v1"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServicePortName is the fully-qualified name of the UserServicePort service.
	UserServicePortName = "gen.go.user.v1.UserServicePort"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServicePortCreateProcedure is the fully-qualified name of the UserServicePort's Create RPC.
	UserServicePortCreateProcedure = "/gen.go.user.v1.UserServicePort/Create"
	// UserServicePortGetProcedure is the fully-qualified name of the UserServicePort's Get RPC.
	UserServicePortGetProcedure = "/gen.go.user.v1.UserServicePort/Get"
	// UserServicePortGetByAuthIdProcedure is the fully-qualified name of the UserServicePort's
	// GetByAuthId RPC.
	UserServicePortGetByAuthIdProcedure = "/gen.go.user.v1.UserServicePort/GetByAuthId"
	// UserServicePortGetPaginationProcedure is the fully-qualified name of the UserServicePort's
	// GetPagination RPC.
	UserServicePortGetPaginationProcedure = "/gen.go.user.v1.UserServicePort/GetPagination"
	// UserServicePortUpdateProcedure is the fully-qualified name of the UserServicePort's Update RPC.
	UserServicePortUpdateProcedure = "/gen.go.user.v1.UserServicePort/Update"
	// UserServicePortDeleteProcedure is the fully-qualified name of the UserServicePort's Delete RPC.
	UserServicePortDeleteProcedure = "/gen.go.user.v1.UserServicePort/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	userServicePortServiceDescriptor             = v1.File_user_v1_user_service_proto.Services().ByName("UserServicePort")
	userServicePortCreateMethodDescriptor        = userServicePortServiceDescriptor.Methods().ByName("Create")
	userServicePortGetMethodDescriptor           = userServicePortServiceDescriptor.Methods().ByName("Get")
	userServicePortGetByAuthIdMethodDescriptor   = userServicePortServiceDescriptor.Methods().ByName("GetByAuthId")
	userServicePortGetPaginationMethodDescriptor = userServicePortServiceDescriptor.Methods().ByName("GetPagination")
	userServicePortUpdateMethodDescriptor        = userServicePortServiceDescriptor.Methods().ByName("Update")
	userServicePortDeleteMethodDescriptor        = userServicePortServiceDescriptor.Methods().ByName("Delete")
)

// UserServicePortClient is a client for the gen.go.user.v1.UserServicePort service.
type UserServicePortClient interface {
	Create(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.UserModel], error)
	Get(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.UserModel], error)
	GetByAuthId(context.Context, *connect.Request[v1.GetUserByAuthIdRequest]) (*connect.Response[v1.UserModel], error)
	GetPagination(context.Context, *connect.Request[v1.GetUsersPaginationRequest]) (*connect.Response[v1.GetUsersPaginationResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UserModel], error)
	Delete(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[wrapperspb.BoolValue], error)
}

// NewUserServicePortClient constructs a client for the gen.go.user.v1.UserServicePort service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServicePortClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServicePortClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServicePortClient{
		create: connect.NewClient[v1.CreateUserRequest, v1.UserModel](
			httpClient,
			baseURL+UserServicePortCreateProcedure,
			connect.WithSchema(userServicePortCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetUserRequest, v1.UserModel](
			httpClient,
			baseURL+UserServicePortGetProcedure,
			connect.WithSchema(userServicePortGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getByAuthId: connect.NewClient[v1.GetUserByAuthIdRequest, v1.UserModel](
			httpClient,
			baseURL+UserServicePortGetByAuthIdProcedure,
			connect.WithSchema(userServicePortGetByAuthIdMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPagination: connect.NewClient[v1.GetUsersPaginationRequest, v1.GetUsersPaginationResponse](
			httpClient,
			baseURL+UserServicePortGetPaginationProcedure,
			connect.WithSchema(userServicePortGetPaginationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.UpdateUserRequest, v1.UserModel](
			httpClient,
			baseURL+UserServicePortUpdateProcedure,
			connect.WithSchema(userServicePortUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteUserRequest, wrapperspb.BoolValue](
			httpClient,
			baseURL+UserServicePortDeleteProcedure,
			connect.WithSchema(userServicePortDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServicePortClient implements UserServicePortClient.
type userServicePortClient struct {
	create        *connect.Client[v1.CreateUserRequest, v1.UserModel]
	get           *connect.Client[v1.GetUserRequest, v1.UserModel]
	getByAuthId   *connect.Client[v1.GetUserByAuthIdRequest, v1.UserModel]
	getPagination *connect.Client[v1.GetUsersPaginationRequest, v1.GetUsersPaginationResponse]
	update        *connect.Client[v1.UpdateUserRequest, v1.UserModel]
	delete        *connect.Client[v1.DeleteUserRequest, wrapperspb.BoolValue]
}

// Create calls gen.go.user.v1.UserServicePort.Create.
func (c *userServicePortClient) Create(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.UserModel], error) {
	return c.create.CallUnary(ctx, req)
}

// Get calls gen.go.user.v1.UserServicePort.Get.
func (c *userServicePortClient) Get(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.UserModel], error) {
	return c.get.CallUnary(ctx, req)
}

// GetByAuthId calls gen.go.user.v1.UserServicePort.GetByAuthId.
func (c *userServicePortClient) GetByAuthId(ctx context.Context, req *connect.Request[v1.GetUserByAuthIdRequest]) (*connect.Response[v1.UserModel], error) {
	return c.getByAuthId.CallUnary(ctx, req)
}

// GetPagination calls gen.go.user.v1.UserServicePort.GetPagination.
func (c *userServicePortClient) GetPagination(ctx context.Context, req *connect.Request[v1.GetUsersPaginationRequest]) (*connect.Response[v1.GetUsersPaginationResponse], error) {
	return c.getPagination.CallUnary(ctx, req)
}

// Update calls gen.go.user.v1.UserServicePort.Update.
func (c *userServicePortClient) Update(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UserModel], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls gen.go.user.v1.UserServicePort.Delete.
func (c *userServicePortClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteUserRequest]) (*connect.Response[wrapperspb.BoolValue], error) {
	return c.delete.CallUnary(ctx, req)
}

// UserServicePortHandler is an implementation of the gen.go.user.v1.UserServicePort service.
type UserServicePortHandler interface {
	Create(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.UserModel], error)
	Get(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.UserModel], error)
	GetByAuthId(context.Context, *connect.Request[v1.GetUserByAuthIdRequest]) (*connect.Response[v1.UserModel], error)
	GetPagination(context.Context, *connect.Request[v1.GetUsersPaginationRequest]) (*connect.Response[v1.GetUsersPaginationResponse], error)
	Update(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UserModel], error)
	Delete(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[wrapperspb.BoolValue], error)
}

// NewUserServicePortHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServicePortHandler(svc UserServicePortHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServicePortCreateHandler := connect.NewUnaryHandler(
		UserServicePortCreateProcedure,
		svc.Create,
		connect.WithSchema(userServicePortCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServicePortGetHandler := connect.NewUnaryHandler(
		UserServicePortGetProcedure,
		svc.Get,
		connect.WithSchema(userServicePortGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServicePortGetByAuthIdHandler := connect.NewUnaryHandler(
		UserServicePortGetByAuthIdProcedure,
		svc.GetByAuthId,
		connect.WithSchema(userServicePortGetByAuthIdMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServicePortGetPaginationHandler := connect.NewUnaryHandler(
		UserServicePortGetPaginationProcedure,
		svc.GetPagination,
		connect.WithSchema(userServicePortGetPaginationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServicePortUpdateHandler := connect.NewUnaryHandler(
		UserServicePortUpdateProcedure,
		svc.Update,
		connect.WithSchema(userServicePortUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	userServicePortDeleteHandler := connect.NewUnaryHandler(
		UserServicePortDeleteProcedure,
		svc.Delete,
		connect.WithSchema(userServicePortDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gen.go.user.v1.UserServicePort/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServicePortCreateProcedure:
			userServicePortCreateHandler.ServeHTTP(w, r)
		case UserServicePortGetProcedure:
			userServicePortGetHandler.ServeHTTP(w, r)
		case UserServicePortGetByAuthIdProcedure:
			userServicePortGetByAuthIdHandler.ServeHTTP(w, r)
		case UserServicePortGetPaginationProcedure:
			userServicePortGetPaginationHandler.ServeHTTP(w, r)
		case UserServicePortUpdateProcedure:
			userServicePortUpdateHandler.ServeHTTP(w, r)
		case UserServicePortDeleteProcedure:
			userServicePortDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServicePortHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServicePortHandler struct{}

func (UnimplementedUserServicePortHandler) Create(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.UserModel], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gen.go.user.v1.UserServicePort.Create is not implemented"))
}

func (UnimplementedUserServicePortHandler) Get(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.UserModel], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gen.go.user.v1.UserServicePort.Get is not implemented"))
}

func (UnimplementedUserServicePortHandler) GetByAuthId(context.Context, *connect.Request[v1.GetUserByAuthIdRequest]) (*connect.Response[v1.UserModel], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gen.go.user.v1.UserServicePort.GetByAuthId is not implemented"))
}

func (UnimplementedUserServicePortHandler) GetPagination(context.Context, *connect.Request[v1.GetUsersPaginationRequest]) (*connect.Response[v1.GetUsersPaginationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gen.go.user.v1.UserServicePort.GetPagination is not implemented"))
}

func (UnimplementedUserServicePortHandler) Update(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UserModel], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gen.go.user.v1.UserServicePort.Update is not implemented"))
}

func (UnimplementedUserServicePortHandler) Delete(context.Context, *connect.Request[v1.DeleteUserRequest]) (*connect.Response[wrapperspb.BoolValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gen.go.user.v1.UserServicePort.Delete is not implemented"))
}
