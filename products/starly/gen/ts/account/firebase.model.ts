// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               unknown
// source: account/firebase.model.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "gen.go.account";

export interface AuthGoogleIdentityResponse {
  idToken: string;
  email: string;
  refreshToken: string;
  expiresIn: string;
  localId: string;
  registered: boolean;
}

export interface FirebaseAuthConfig {
  apiKey: string;
  projectId: string;
}

export interface AuthGoogleIdentityRequestOptions {
  /** @default true */
  returnSecureToken: boolean;
}

export interface AuthGoogleIdentityRequest {
  config: FirebaseAuthConfig | undefined;
  options?: AuthGoogleIdentityRequestOptions | undefined;
}

function createBaseAuthGoogleIdentityResponse(): AuthGoogleIdentityResponse {
  return { idToken: "", email: "", refreshToken: "", expiresIn: "", localId: "", registered: false };
}

export const AuthGoogleIdentityResponse = {
  encode(message: AuthGoogleIdentityResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idToken !== "") {
      writer.uint32(10).string(message.idToken);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.refreshToken !== "") {
      writer.uint32(26).string(message.refreshToken);
    }
    if (message.expiresIn !== "") {
      writer.uint32(34).string(message.expiresIn);
    }
    if (message.localId !== "") {
      writer.uint32(42).string(message.localId);
    }
    if (message.registered !== false) {
      writer.uint32(48).bool(message.registered);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AuthGoogleIdentityResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthGoogleIdentityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idToken = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.expiresIn = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.localId = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.registered = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthGoogleIdentityResponse {
    return {
      idToken: isSet(object.idToken) ? globalThis.String(object.idToken) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
      expiresIn: isSet(object.expiresIn) ? globalThis.String(object.expiresIn) : "",
      localId: isSet(object.localId) ? globalThis.String(object.localId) : "",
      registered: isSet(object.registered) ? globalThis.Boolean(object.registered) : false,
    };
  },

  toJSON(message: AuthGoogleIdentityResponse): unknown {
    const obj: any = {};
    if (message.idToken !== "") {
      obj.idToken = message.idToken;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    if (message.expiresIn !== "") {
      obj.expiresIn = message.expiresIn;
    }
    if (message.localId !== "") {
      obj.localId = message.localId;
    }
    if (message.registered !== false) {
      obj.registered = message.registered;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthGoogleIdentityResponse>, I>>(base?: I): AuthGoogleIdentityResponse {
    return AuthGoogleIdentityResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthGoogleIdentityResponse>, I>>(object: I): AuthGoogleIdentityResponse {
    const message = createBaseAuthGoogleIdentityResponse();
    message.idToken = object.idToken ?? "";
    message.email = object.email ?? "";
    message.refreshToken = object.refreshToken ?? "";
    message.expiresIn = object.expiresIn ?? "";
    message.localId = object.localId ?? "";
    message.registered = object.registered ?? false;
    return message;
  },
};

function createBaseFirebaseAuthConfig(): FirebaseAuthConfig {
  return { apiKey: "", projectId: "" };
}

export const FirebaseAuthConfig = {
  encode(message: FirebaseAuthConfig, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.apiKey !== "") {
      writer.uint32(10).string(message.apiKey);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FirebaseAuthConfig {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFirebaseAuthConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiKey = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FirebaseAuthConfig {
    return {
      apiKey: isSet(object.apiKey) ? globalThis.String(object.apiKey) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
    };
  },

  toJSON(message: FirebaseAuthConfig): unknown {
    const obj: any = {};
    if (message.apiKey !== "") {
      obj.apiKey = message.apiKey;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FirebaseAuthConfig>, I>>(base?: I): FirebaseAuthConfig {
    return FirebaseAuthConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FirebaseAuthConfig>, I>>(object: I): FirebaseAuthConfig {
    const message = createBaseFirebaseAuthConfig();
    message.apiKey = object.apiKey ?? "";
    message.projectId = object.projectId ?? "";
    return message;
  },
};

function createBaseAuthGoogleIdentityRequestOptions(): AuthGoogleIdentityRequestOptions {
  return { returnSecureToken: false };
}

export const AuthGoogleIdentityRequestOptions = {
  encode(message: AuthGoogleIdentityRequestOptions, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.returnSecureToken !== false) {
      writer.uint32(8).bool(message.returnSecureToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AuthGoogleIdentityRequestOptions {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthGoogleIdentityRequestOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.returnSecureToken = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthGoogleIdentityRequestOptions {
    return {
      returnSecureToken: isSet(object.returnSecureToken) ? globalThis.Boolean(object.returnSecureToken) : false,
    };
  },

  toJSON(message: AuthGoogleIdentityRequestOptions): unknown {
    const obj: any = {};
    if (message.returnSecureToken !== false) {
      obj.returnSecureToken = message.returnSecureToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthGoogleIdentityRequestOptions>, I>>(
    base?: I,
  ): AuthGoogleIdentityRequestOptions {
    return AuthGoogleIdentityRequestOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthGoogleIdentityRequestOptions>, I>>(
    object: I,
  ): AuthGoogleIdentityRequestOptions {
    const message = createBaseAuthGoogleIdentityRequestOptions();
    message.returnSecureToken = object.returnSecureToken ?? false;
    return message;
  },
};

function createBaseAuthGoogleIdentityRequest(): AuthGoogleIdentityRequest {
  return { config: undefined, options: undefined };
}

export const AuthGoogleIdentityRequest = {
  encode(message: AuthGoogleIdentityRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.config !== undefined) {
      FirebaseAuthConfig.encode(message.config, writer.uint32(10).fork()).ldelim();
    }
    if (message.options !== undefined) {
      AuthGoogleIdentityRequestOptions.encode(message.options, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AuthGoogleIdentityRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthGoogleIdentityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.config = FirebaseAuthConfig.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.options = AuthGoogleIdentityRequestOptions.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthGoogleIdentityRequest {
    return {
      config: isSet(object.config) ? FirebaseAuthConfig.fromJSON(object.config) : undefined,
      options: isSet(object.options) ? AuthGoogleIdentityRequestOptions.fromJSON(object.options) : undefined,
    };
  },

  toJSON(message: AuthGoogleIdentityRequest): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = FirebaseAuthConfig.toJSON(message.config);
    }
    if (message.options !== undefined) {
      obj.options = AuthGoogleIdentityRequestOptions.toJSON(message.options);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthGoogleIdentityRequest>, I>>(base?: I): AuthGoogleIdentityRequest {
    return AuthGoogleIdentityRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthGoogleIdentityRequest>, I>>(object: I): AuthGoogleIdentityRequest {
    const message = createBaseAuthGoogleIdentityRequest();
    message.config = (object.config !== undefined && object.config !== null)
      ? FirebaseAuthConfig.fromPartial(object.config)
      : undefined;
    message.options = (object.options !== undefined && object.options !== null)
      ? AuthGoogleIdentityRequestOptions.fromPartial(object.options)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
