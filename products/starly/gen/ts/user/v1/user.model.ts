// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               unknown
// source: user/v1/user.model.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { FileModel } from "../../file/v1/file.model";
import { Value } from "../../google/protobuf/struct";

export const protobufPackage = "gen.go.user.v1";

export enum UserStatus {
  INACTIVE = 0,
  ACTIVE = 1,
  CLOSED = 2,
  UNRECOGNIZED = -1,
}

export function userStatusFromJSON(object: any): UserStatus {
  switch (object) {
    case 0:
    case "INACTIVE":
      return UserStatus.INACTIVE;
    case 1:
    case "ACTIVE":
      return UserStatus.ACTIVE;
    case 2:
    case "CLOSED":
      return UserStatus.CLOSED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserStatus.UNRECOGNIZED;
  }
}

export function userStatusToJSON(object: UserStatus): string {
  switch (object) {
    case UserStatus.INACTIVE:
      return "INACTIVE";
    case UserStatus.ACTIVE:
      return "ACTIVE";
    case UserStatus.CLOSED:
      return "CLOSED";
    case UserStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum AuthStrategy {
  BASIC = 0,
  GOOGLE = 1,
  GITHUB = 2,
  FACEBOOK = 3,
  X = 4,
  APPLE = 5,
  LINKEDIN = 6,
  UNRECOGNIZED = -1,
}

export function authStrategyFromJSON(object: any): AuthStrategy {
  switch (object) {
    case 0:
    case "BASIC":
      return AuthStrategy.BASIC;
    case 1:
    case "GOOGLE":
      return AuthStrategy.GOOGLE;
    case 2:
    case "GITHUB":
      return AuthStrategy.GITHUB;
    case 3:
    case "FACEBOOK":
      return AuthStrategy.FACEBOOK;
    case 4:
    case "X":
      return AuthStrategy.X;
    case 5:
    case "APPLE":
      return AuthStrategy.APPLE;
    case 6:
    case "LINKEDIN":
      return AuthStrategy.LINKEDIN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AuthStrategy.UNRECOGNIZED;
  }
}

export function authStrategyToJSON(object: AuthStrategy): string {
  switch (object) {
    case AuthStrategy.BASIC:
      return "BASIC";
    case AuthStrategy.GOOGLE:
      return "GOOGLE";
    case AuthStrategy.GITHUB:
      return "GITHUB";
    case AuthStrategy.FACEBOOK:
      return "FACEBOOK";
    case AuthStrategy.X:
      return "X";
    case AuthStrategy.APPLE:
      return "APPLE";
    case AuthStrategy.LINKEDIN:
      return "LINKEDIN";
    case AuthStrategy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface UserModel {
  id: string;
  email: string;
  nickname: string;
  status: UserStatus;
  isEmailVerified: boolean;
  name: string;
  avatarUrl: string;
  firebaseUserId: string;
  authStrategy: AuthStrategy;
  openPlatform: string;
  utmCampaign: string;
  utmMedium: string;
  utmSource: string;
  metadata: any | undefined;
  createdAt: string;
  updatedAt: string;
}

export interface Collaborator {
  id: string;
  name: string;
  nickname: string;
  avatar: FileModel | undefined;
  process: any | undefined;
}

function createBaseUserModel(): UserModel {
  return {
    id: "",
    email: "",
    nickname: "",
    status: 0,
    isEmailVerified: false,
    name: "",
    avatarUrl: "",
    firebaseUserId: "",
    authStrategy: 0,
    openPlatform: "",
    utmCampaign: "",
    utmMedium: "",
    utmSource: "",
    metadata: undefined,
    createdAt: "",
    updatedAt: "",
  };
}

export const UserModel = {
  encode(message: UserModel, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.nickname !== "") {
      writer.uint32(26).string(message.nickname);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.isEmailVerified !== false) {
      writer.uint32(40).bool(message.isEmailVerified);
    }
    if (message.name !== "") {
      writer.uint32(50).string(message.name);
    }
    if (message.avatarUrl !== "") {
      writer.uint32(58).string(message.avatarUrl);
    }
    if (message.firebaseUserId !== "") {
      writer.uint32(66).string(message.firebaseUserId);
    }
    if (message.authStrategy !== 0) {
      writer.uint32(72).int32(message.authStrategy);
    }
    if (message.openPlatform !== "") {
      writer.uint32(82).string(message.openPlatform);
    }
    if (message.utmCampaign !== "") {
      writer.uint32(90).string(message.utmCampaign);
    }
    if (message.utmMedium !== "") {
      writer.uint32(98).string(message.utmMedium);
    }
    if (message.utmSource !== "") {
      writer.uint32(106).string(message.utmSource);
    }
    if (message.metadata !== undefined) {
      Value.encode(Value.wrap(message.metadata), writer.uint32(114).fork()).ldelim();
    }
    if (message.createdAt !== "") {
      writer.uint32(122).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(130).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserModel {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nickname = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isEmailVerified = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.name = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.avatarUrl = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.firebaseUserId = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.authStrategy = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.openPlatform = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.utmCampaign = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.utmMedium = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.utmSource = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.metadata = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserModel {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      status: isSet(object.status) ? userStatusFromJSON(object.status) : 0,
      isEmailVerified: isSet(object.isEmailVerified) ? globalThis.Boolean(object.isEmailVerified) : false,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : "",
      firebaseUserId: isSet(object.firebaseUserId) ? globalThis.String(object.firebaseUserId) : "",
      authStrategy: isSet(object.authStrategy) ? authStrategyFromJSON(object.authStrategy) : 0,
      openPlatform: isSet(object.openPlatform) ? globalThis.String(object.openPlatform) : "",
      utmCampaign: isSet(object.utmCampaign) ? globalThis.String(object.utmCampaign) : "",
      utmMedium: isSet(object.utmMedium) ? globalThis.String(object.utmMedium) : "",
      utmSource: isSet(object.utmSource) ? globalThis.String(object.utmSource) : "",
      metadata: isSet(object?.metadata) ? object.metadata : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: UserModel): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.status !== 0) {
      obj.status = userStatusToJSON(message.status);
    }
    if (message.isEmailVerified !== false) {
      obj.isEmailVerified = message.isEmailVerified;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.avatarUrl !== "") {
      obj.avatarUrl = message.avatarUrl;
    }
    if (message.firebaseUserId !== "") {
      obj.firebaseUserId = message.firebaseUserId;
    }
    if (message.authStrategy !== 0) {
      obj.authStrategy = authStrategyToJSON(message.authStrategy);
    }
    if (message.openPlatform !== "") {
      obj.openPlatform = message.openPlatform;
    }
    if (message.utmCampaign !== "") {
      obj.utmCampaign = message.utmCampaign;
    }
    if (message.utmMedium !== "") {
      obj.utmMedium = message.utmMedium;
    }
    if (message.utmSource !== "") {
      obj.utmSource = message.utmSource;
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserModel>, I>>(base?: I): UserModel {
    return UserModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserModel>, I>>(object: I): UserModel {
    const message = createBaseUserModel();
    message.id = object.id ?? "";
    message.email = object.email ?? "";
    message.nickname = object.nickname ?? "";
    message.status = object.status ?? 0;
    message.isEmailVerified = object.isEmailVerified ?? false;
    message.name = object.name ?? "";
    message.avatarUrl = object.avatarUrl ?? "";
    message.firebaseUserId = object.firebaseUserId ?? "";
    message.authStrategy = object.authStrategy ?? 0;
    message.openPlatform = object.openPlatform ?? "";
    message.utmCampaign = object.utmCampaign ?? "";
    message.utmMedium = object.utmMedium ?? "";
    message.utmSource = object.utmSource ?? "";
    message.metadata = object.metadata ?? undefined;
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseCollaborator(): Collaborator {
  return { id: "", name: "", nickname: "", avatar: undefined, process: undefined };
}

export const Collaborator = {
  encode(message: Collaborator, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.nickname !== "") {
      writer.uint32(26).string(message.nickname);
    }
    if (message.avatar !== undefined) {
      FileModel.encode(message.avatar, writer.uint32(34).fork()).ldelim();
    }
    if (message.process !== undefined) {
      Value.encode(Value.wrap(message.process), writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Collaborator {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollaborator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nickname = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.avatar = FileModel.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.process = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Collaborator {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      avatar: isSet(object.avatar) ? FileModel.fromJSON(object.avatar) : undefined,
      process: isSet(object?.process) ? object.process : undefined,
    };
  },

  toJSON(message: Collaborator): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.avatar !== undefined) {
      obj.avatar = FileModel.toJSON(message.avatar);
    }
    if (message.process !== undefined) {
      obj.process = message.process;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Collaborator>, I>>(base?: I): Collaborator {
    return Collaborator.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Collaborator>, I>>(object: I): Collaborator {
    const message = createBaseCollaborator();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.nickname = object.nickname ?? "";
    message.avatar = (object.avatar !== undefined && object.avatar !== null)
      ? FileModel.fromPartial(object.avatar)
      : undefined;
    message.process = object.process ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
