// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               unknown
// source: user/v1/user.service.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { BoolValue } from "../../google/protobuf/wrappers";
import {
  CreateUserRequest,
  DeleteUserRequest,
  GetUserByAuthIdRequest,
  GetUserRequest,
  GetUsersPaginationRequest,
  GetUsersPaginationResponse,
  UpdateUserRequest,
} from "./user.event";
import { UserModel } from "./user.model";

export const protobufPackage = "gen.go.user.v1";

export interface UserServicePort {
  Create(request: CreateUserRequest): Promise<UserModel>;
  Get(request: GetUserRequest): Promise<UserModel>;
  GetByAuthId(request: GetUserByAuthIdRequest): Promise<UserModel>;
  GetPagination(request: GetUsersPaginationRequest): Promise<GetUsersPaginationResponse>;
  Update(request: UpdateUserRequest): Promise<UserModel>;
  Delete(request: DeleteUserRequest): Promise<BoolValue>;
}

export const UserServicePortServiceName = "gen.go.user.v1.UserServicePort";
export class UserServicePortClientImpl implements UserServicePort {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || UserServicePortServiceName;
    this.rpc = rpc;
    this.Create = this.Create.bind(this);
    this.Get = this.Get.bind(this);
    this.GetByAuthId = this.GetByAuthId.bind(this);
    this.GetPagination = this.GetPagination.bind(this);
    this.Update = this.Update.bind(this);
    this.Delete = this.Delete.bind(this);
  }
  Create(request: CreateUserRequest): Promise<UserModel> {
    const data = CreateUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Create", data);
    return promise.then((data) => UserModel.decode(_m0.Reader.create(data)));
  }

  Get(request: GetUserRequest): Promise<UserModel> {
    const data = GetUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Get", data);
    return promise.then((data) => UserModel.decode(_m0.Reader.create(data)));
  }

  GetByAuthId(request: GetUserByAuthIdRequest): Promise<UserModel> {
    const data = GetUserByAuthIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetByAuthId", data);
    return promise.then((data) => UserModel.decode(_m0.Reader.create(data)));
  }

  GetPagination(request: GetUsersPaginationRequest): Promise<GetUsersPaginationResponse> {
    const data = GetUsersPaginationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPagination", data);
    return promise.then((data) => GetUsersPaginationResponse.decode(_m0.Reader.create(data)));
  }

  Update(request: UpdateUserRequest): Promise<UserModel> {
    const data = UpdateUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Update", data);
    return promise.then((data) => UserModel.decode(_m0.Reader.create(data)));
  }

  Delete(request: DeleteUserRequest): Promise<BoolValue> {
    const data = DeleteUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Delete", data);
    return promise.then((data) => BoolValue.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
