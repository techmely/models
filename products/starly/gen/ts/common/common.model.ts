// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               unknown
// source: common/common.model.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import Long = require("long");

export const protobufPackage = "gen.go.common";

export enum OrderDirection {
  ASC = 0,
  DESC = 1,
  UNRECOGNIZED = -1,
}

export function orderDirectionFromJSON(object: any): OrderDirection {
  switch (object) {
    case 0:
    case "ASC":
      return OrderDirection.ASC;
    case 1:
    case "DESC":
      return OrderDirection.DESC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OrderDirection.UNRECOGNIZED;
  }
}

export function orderDirectionToJSON(object: OrderDirection): string {
  switch (object) {
    case OrderDirection.ASC:
      return "ASC";
    case OrderDirection.DESC:
      return "DESC";
    case OrderDirection.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface RequestFilter {
  page: number;
  limit: number;
  offset: number;
  sortFields: string[];
  orderDirection: OrderDirection;
}

function createBaseRequestFilter(): RequestFilter {
  return { page: 0, limit: 0, offset: 0, sortFields: [], orderDirection: 0 };
}

export const RequestFilter = {
  encode(message: RequestFilter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.page !== 0) {
      writer.uint32(8).uint64(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(16).uint64(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(24).uint64(message.offset);
    }
    for (const v of message.sortFields) {
      writer.uint32(34).string(v!);
    }
    if (message.orderDirection !== 0) {
      writer.uint32(40).int32(message.orderDirection);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RequestFilter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.limit = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.offset = longToNumber(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.sortFields.push(reader.string());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.orderDirection = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestFilter {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
      sortFields: globalThis.Array.isArray(object?.sortFields)
        ? object.sortFields.map((e: any) => globalThis.String(e))
        : [],
      orderDirection: isSet(object.orderDirection) ? orderDirectionFromJSON(object.orderDirection) : 0,
    };
  },

  toJSON(message: RequestFilter): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    if (message.sortFields?.length) {
      obj.sortFields = message.sortFields;
    }
    if (message.orderDirection !== 0) {
      obj.orderDirection = orderDirectionToJSON(message.orderDirection);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestFilter>, I>>(base?: I): RequestFilter {
    return RequestFilter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestFilter>, I>>(object: I): RequestFilter {
    const message = createBaseRequestFilter();
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    message.sortFields = object.sortFields?.map((e) => e) || [];
    message.orderDirection = object.orderDirection ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
